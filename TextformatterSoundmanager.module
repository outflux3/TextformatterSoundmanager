<?php

/**
 * Soundmanager2 Audio for Proceswire
 *
 * Looks for shortcodes within the field and outputs Soundmanager2 audio player, based on settings
 *
 * Copyright (C) 2017 Macrura
 * Licensed under MPL 2.0
 * https://processwire.com
 *
 * nibiri.com
 *
 */

class TextformatterSoundmanager extends Textformatter implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' 	=> __('Soundmanager2 Audio for Proceswire', __FILE__), 
			'version' 	=> 110,
			'summary' 	=> __('Use file field to add audio files, use shortcode to insert into RTE.', __FILE__),
			'author' 	=> 'Macrura',
			'icon'     	=> 'volume-up',
			'href' 		=> 'https://processwire.com/talk/topic/15406-pre-release-soundmanager2-audio-for-processwire/',
			'singular' 	=> true, 
			'autoload' 	=> true, 
			'requires'  => 'ProcessWire>=2.6.1, PHP>=5.4.0',
			); 
	}


	protected static $configDefaults = array(
		'player_tag'		=> 'smplayer',
		'playlist_tag'		=> 'smplaylist',
		'open_symbol'		=> '[',
		'close_symbol'		=> ']',
		'barui_skin'		=> '',
		'barui_color'		=> '',
		'barui_size'		=> '',
		'barui_options'		=> '',
		'barui_template' 	=> '<span itemprop="byArtist"><b>{artist}</b></span> -  <span itemprop="name">{title}</span> <span itemprop="author">({composer})</span> <span itemprop="inAlbum" class="label">{album}</span></a></li>',
		'playlist_height'	=> 300,
		'cassette_options'	=> '',
		'flash_version'		=>	'8', // default
		'flashblock'		=>	0,
		'single_default'	=> 'mp3-button',
		'files_field'		=> '',
		'tag_field'			=> '',
		'audio_formats'		=> ['mp3', 'm4a', 'ogg', 'mp4', 'wav'],
		'getid3'			=> 0,
		'use_schema'		=> 0,
		'assets_folder'		=> '',
		'swf_folder'		=> '', // on the off chance it needs to be moved
		'custom_skins'		=> '', // move the skins folder
		'one_per_page'		=> 0, // use a 1 audio file per page model (uses the page title for the audio title)
	); 

	/**
	 * Data as used by the get/set functions
	 *
	 */
	protected $data = array();

	/**
	 * Set our configuration defaults
	 *
	 */
	public function __construct() {
		foreach(self::$configDefaults as $key => $value) {
			$this->set($key, $value); 
		}
	}


	/**
	 * Module configuration screen
	 *
	 */
	public static function getModuleConfigInputfields(array $data) {

		foreach(self::$configDefaults as $key => $value) {
			if(!isset($data[$key])||$data[$key]=="") $data[$key] = $value;
		}

		unset($data['cacheClear']);
		$inputfields = new InputfieldWrapper();

		// SM2 DEFAULTS
        // ------------------------------------------------------------------------
	    $f = wire('modules')->get('InputfieldMarkup');
        $f->name  = 'instructions';
        $f->label = __('Instructions', __FILE__);
        $f->markupText = __('You can initiate audio players using the shortcode within any text field, or using the API. See the README.md for more info.', __FILE__);
        $f->markupText .= "<br>";
        $f->markupText .= __('<span style="font-style:italic">N.B.: If using the cassette  UI, you can only have 1 cassette per page since the file to play is set as a single JS variable.</span>', __FILE__);
        $inputfields->add($f); 

        // SM2 DEFAULTS
        // ------------------------------------------------------------------------
		$fset = wire('modules')->get("InputfieldFieldset");
		$fset->label = 'Global Defaults';
        //$fset->collapsed = Inputfield::collapsedNever;

			// ------------------------------------------------------------------------
	        // OPEN SYMBOL
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'open_symbol');
			$f->attr('value', $data['open_symbol']); 
			$f->attr('size', 20); 
			$f->attr('maxlength', 21);
			$f->attr('placeholder', '[');
			$f->label = __('Open Tag');
			$f->columnWidth = 50;
			$fset->add($f);
			//$inputfields->add($f); 

			// ------------------------------------------------------------------------
	        // CLOSE SYMBOL
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText');
			$f->attr('name', 'close_symbol');
			$f->attr('value', $data['close_symbol']);
			$f->attr('size', 20);
			$f->attr('maxlength', 21);
			$f->attr('placeholder', ']');
			$f->label = __('Close Tag');
			$f->columnWidth = 50;
			$fset->add($f);
			//$inputfields->add($f); 

			// ------------------------------------------------------------------------
	        // PLAYER TAG (SHORTCODE WORD)
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'player_tag');
			$f->attr('value', $data['player_tag']); 
			$f->attr('size', 20); 
			$f->attr('maxlength', 21);
			$f->attr('placeholder', '[');
			$f->label = __('Player Tag');
			$f->description = __('The tag to use to trigger the audio player within the shortcode.'); 
			$f->columnWidth = 50;
			$fset->add($f);
			//$inputfields->add($f); 

			// ------------------------------------------------------------------------
	        // PLAYILST TAG (SHORTCODE WORD)
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'playlist_tag');
			$f->attr('value', $data['playlist_tag']); 
			$f->attr('size', 20); 
			$f->attr('maxlength', 21);
			$f->attr('placeholder', '[');
			$f->label = __('Playlist Tag');
			$f->description = __('The tag to use to trigger a playlist from another page, within the shortcode.'); 
			$f->columnWidth = 50;
			$fset->add($f);
			//$inputfields->add($f); 


	        // ------------------------------------------------------------------------
	        // Field to use for AUDIO
	        // ------------------------------------------------------------------------
	        $files_fields = wire('fields')->find('type=FieldtypeFile');
	        if (count($files_fields) > 0) {
	            $f              = wire('modules')->get('InputfieldSelect');
	            $f->name        = 'files_field';
	            $f->label       = __('Audio Files Field', __FILE__);

	            foreach ($files_fields as $files_field) {
	                $f->addOption($files_field->name, self::getFormattedOptionName($files_field));
	            }

	            if ($data[ $f->name ]) {
	                $f->attr('value', $data[ $f->name ]);
	            }
	        } else {
	            // add info that no URL type fields are available
	            $f        = wire('modules')->get('InputfieldMarkup');
	            $f->name  = 'no_files_fields';
	            $f->label = __('Enabled fields', __FILE__);
	            $f->markupText = __('There are no files fields available', __FILE__);
	        }
	        $f->columnWidth = 50;
	        $fset->add($f);
	        //$inputfields->add($f);


	        // ------------------------------------------------------------------------
	        // Field to use for Tag (to reference another page's audio, e.g. for global playlist)
	        // ------------------------------------------------------------------------
	        $tag_fields = wire('fields')->find('type=FieldtypeText');
	        if (count($tag_fields) > 0) {
	            $f              = wire('modules')->get('InputfieldSelect');
	            $f->name        = 'tag_field';
	            $f->label       = __('Tag Field', __FILE__);
	            $f->description = __('You can select a field to use for defining other pages audio to load, for example to create a global playlist.', __FILE__);
	            foreach ($tag_fields as $tag_field) {
	                $f->addOption($tag_field->name, self::getFormattedOptionName($tag_field));
	            }

	            if ($data[ $f->name ]) {
	                $f->attr('value', $data[ $f->name ]);
	            }
	        } else {
	            // add info that no URL type fields are available
	            $f        = wire('modules')->get('InputfieldMarkup');
	            $f->name  = 'no_text_fields';
	            $f->label = __('Tag fields', __FILE__);
	            $f->markupText = __('There are no text fields available to use for tagging pages.', __FILE__);
	        }
	        $f->columnWidth = 50;
	        $fset->add($f);
	        //$inputfields->add($f);


	        // ------------------------------------------------------------------------
	        // Default Single Player
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldSelect'); 
			$f->attr('name', __('single_default'));
			$f->addOption(__('mp3-button'),'Small Button (mp3-button)', ($data['single_default']=='mp3-button')?array('selected'=>'selected'):null);
			$f->addOption(__('mp3-links'),'Playable Links (mp3-links)', ($data['single_default']=='mp3-links')?array('selected'=>'selected'):null);
			$f->addOption(__('360-player'),'360 Player (360-player)', ($data['single_default']=='360-player')?array('selected'=>'selected'):null);
			$f->addOption(__('360-vis'),'360 Large Animated (360-vis)', ($data['single_default']=='360-vis')?array('selected'=>'selected'):null);
			$f->addOption(__('page-player'),'Page Player (page-player)', ($data['single_default']=='page-player')?array('selected'=>'selected'):null);
			$f->addOption(__('bar-ui'),'Bar UI (bar-ui)', ($data['single_default']=='bar-ui')?array('selected'=>'selected'):null);
			$f->label = __('Default Single Player'); 
			$f->notes = __('can be overriden per player within shortcode, use the tag in the parenthesis.');
			//$f->columnWidth = 33;
			//$inputfields->add($f); 
			$fset->add($f);


		 $inputfields->add($fset); 


		// ------------------------------------------------------------------------
        // BAR-UI OPTIONS FIELDSET
        // ------------------------------------------------------------------------
		$fset = wire('modules')->get("InputfieldFieldset");
        //$fset->columnWidth = 64;
		$fset->label = 'Bar-UI Settings';
        //$fset->collapsed = Inputfield::collapsedNever;

	        // ------------------------------------------------------------------------
	        // BAR-UI Hex color for default bar-ui background color
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'barui_color');
			$f->attr('value', $data['barui_color']); 
			$f->attr('size', 20); 
			$f->attr('maxlength', 21);
			$f->attr('placeholder', '3399CC');
			$f->label = __('Bar-UI Default Color'); 
			$f->description = __('Use hexadecimal color specification'); 
			$f->columnWidth = 33;
			$fset->add($f);
			//$inputfields->add($f); 

	        // ------------------------------------------------------------------------
	        // BAR-UI Font Size (effects the whole size) @todo
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldInteger'); 
			$f->attr('name', 'barui_size');
			$f->attr('value', $data['barui_size']); 
			$f->attr('placeholder', '15');
			$f->label = __('Bar-UI Font Size'); 
			$f->description = __('The font size effects the entire player size'); 
			$f->columnWidth = 34;
			$f->notes = __('default is 15px');
			$fset->add($f);
			//$inputfields->add($f); 

	        // ------------------------------------------------------------------------
	        // BAR-UI Playlist height
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldInteger'); 
			$f->attr('name', 'playlist_height');
			$f->attr('value', $data['playlist_height']); 
			$f->label = __('Playlist Drawer Height'); 
			$f->columnWidth = 33;
			$fset->add($f);
			//$inputfields->add($f); 

	        // ------------------------------------------------------------------------
	        // BAR-UI Options
	        // ------------------------------------------------------------------------
	        $f = wire('modules')->get("InputfieldCheckboxes");
	        $f->attr('name', 'barui_options');
	        $f->label = 'Bar-UI Options';
	        $f->description = __('Default options for the Bar-UI player.', __FILE__);
	        $f->notes = __('These only affect the Bar-UI interface.');
	        //$f->columnWidth = 50;
	        $f->addOption('playlist-open', 'Playlist Open');
	        $f->addOption('flat', 'Flat (no 3-d effect)');
	        $f->addOption('dark-text', 'Dark Text (choose a light background color)');
	        $f->addOption('full-width', 'Full Width (force to always be full width of container)');
	        $f->addOption('compact', 'Compact (smaller width)');
	        $f->addOption('fixed', 'Fixed to bottom of viewport');
	        if($data['barui_options']) $f->attr('value', $data['barui_options']);
	        $f->columnWidth = 50;
	        $fset->add($f);
	        //$inputfields->add($f);

	        // ------------------------------------------------------------------------
	        // BAR-UI Define select for the default BAR-UI skin
	        // ------------------------------------------------------------------------
        	$cs = '';
        	if($data['custom_skins'] && is_dir(wire('config')->paths->root . $data['custom_skins'])) {
        		$cs = wire('config')->paths->root . $data['custom_skins'];
        	}
        	$skins = self::getSkins($cs);

			$f = wire('modules')->get('InputfieldSelect'); 
			$f->attr('name', __('barui_skin'));
			// the skin file base name should also be the css class and can be passed as a paramter on the shortcode 
			// or when calling the player from the api
			foreach($skins as $skin) {
				$f->addOption(__($skin['file']),$skin['title'] . ' (' . $skin['file'] . ')', ($data['barui_skin']==$skin['file'])?array('selected'=>'selected'):null);
			}
			$f->label = __('Custom Bar-UI Skin'); 
			$f->description = __('Default skin for the Bar-UI player. You can also change the path to the skins folder and create/edit your skins', __FILE__);
	        $f->notes = __('Copy the existing skins folder from the modules and be sure to use the same format at the top of the file for identifying the name of the skin.');
			$f->columnWidth = 50;
			$fset->add($f);

	        // ------------------------------------------------------------------------
	        // BAR-UI Title Template
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldTextarea'); 
			$f->attr('name', 'barui_template');
			$f->attr('value', $data['barui_template']); 
			$f->label = __('Bar-UI Track Title Template'); 
			$f->description = __('Use the required tokens for replacement.'); 
			$fset->add($f);

	        // ------------------------------------------------------------------------
	        // Custom Skins Folder: allows to move the skins folder
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'custom_skins');
			$f->attr('value', $data['custom_skins']); 
			$f->attr('size', 80); 
			$f->attr('maxlength', 200);
			$f->attr('placeholder', 'site/templates/sm2-skins/');
			$f->label = __('Custom Bar-UI Skins Folder'); 
			$f->description = __('Enter the folder location relative to the root of your install, eg site/templates/sm2-skins/'); 
			$f->collapsed = Inputfield::collapsedBlank;
			$fset->add($f);
			//$inputfields->add($f); 


        $inputfields->add($fset); 


        // ------------------------------------------------------------------------
        // Cassette Player Options
        // ------------------------------------------------------------------------
        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'cassette_options');
        $f->label = 'Cassette Options';
        $f->description = __('Default options for the Cassette Player.', __FILE__);
        $f->notes = __('These only affect the Cassette Player UI. The individual player may be configured using these words.');
        $f->notes .= "\n";
        $f->notes .= __('The TDK option should not be combined with other options.');
        $f->addOption('ma-r90', 'TDK MA-R (Metal-Alloy Reference) (ma-r90)');
        $f->addOption('cutout', 'Shows a transparent cutout for the reels. (cutout)');
        $f->addOption('black-micro_dark', 'Darker color cassette (black-micro_dark)'); //+dark
        $f->addOption('blue_color', 'Blue color cassette (blue_color)');
        $f->addOption('green_color', 'Green color cassette (green_color)');
        if($data['cassette_options']) $f->attr('value', $data['cassette_options']);
        $inputfields->add($f);

        // ------------------------------------------------------------------------
        // Permitted Formats
        // ------------------------------------------------------------------------
        $f = wire('modules')->get("InputfieldCheckboxes");
        $f->attr('name', 'audio_formats');
        $f->label = 'Allowed Formats';
        $f->description = __('Allowed file extenstions. (Audio formats)', __FILE__);
        $f->notes = __('By default, these formats will be accepted by the player. Uncheck any extensions for the player to skip.');
        //$f->columnWidth = 50; 
        $f->addOption('mp3', 'MPEG-3 (.mp3)');
        $f->addOption('m4a', 'MPEG-4 (.m4a) AAC, Apple Lossless');
        $f->addOption('ogg', 'Ogg-Vorbis (.ogg)');
        $f->addOption('mp4', 'MPEG-4 (.mp4)');
        $f->addOption('wav', 'Wave Audio (.wav)');
        if($data['audio_formats']) $f->attr('value', $data['audio_formats']);
        $inputfields->add($f);


        // ------------------------------------------------------------------------
        // Assets Folder: allows to move the assets folder
        // ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'assets_folder');
		$f->attr('value', $data['assets_folder']); 
		$f->attr('size', 80); 
		$f->attr('maxlength', 200);
		$f->attr('placeholder', 'site/templates/plugins/soundmanager2/');
		$f->label = __('Custom Assets Folder'); 
		$f->description = __('Enter the folder location for the sm2 assets relative to the root of your install, eg site/templates/plugins/soundmanager2/'); 
		$f->notes = __('You should copy the existing folder from the module, if you need it somewhere else.');
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 

        // ------------------------------------------------------------------------
        // USE ID 3
        // ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'getid3');
		$f->attr('value', 1); 
		if($data['getid3']) $f->attr('checked', 'checked'); 
		$f->label = __('Get id3 Tags'); 
		$f->description = __('Check this box to allow the system to read ID3 tags from the audio files.');
		$f->notes = __('getId3 is slow to process each audio file. The id3 tags are cached, so it is recommended you prime the cache by viewing your pages with audio.'); 
		$f->columnWidth = 50;
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 

        // ------------------------------------------------------------------------
        // INCLUDE SCHEMA (Only really useful when used with ID3)
        // ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'use_schema');
		$f->attr('value', 1); 
		if($data['use_schema']) $f->attr('checked', 'checked'); 
		$f->label = __('Use Schema.org attributes'); 
		$f->description = __('Include Schema.org (itemtype, itemprop etc.).');
		$f->notes = __('This works best when used with ID3 since the schema for title, artist, composer, and album can be included'); 
		$f->columnWidth = 50;
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 


		// ------------------------------------------------------------------------
        // FLASH OPTIONS FIELDSET
        // ------------------------------------------------------------------------
		$fset = wire('modules')->get("InputfieldFieldset");
		$fset->label = 'Flash Settings';
        $fset->collapsed = Inputfield::collapsedYes;

	        // ------------------------------------------------------------------------
	        // SM2 flash version (change to radios or remove this)
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldSelect'); 
			$f->attr('name', __('flash_version'));
			$f->addOption(__('8'),null, ($data['flash_version']=='8')?array('selected'=>'selected'):null); 
			$f->addOption(__('9'),null, ($data['flash_version']=='9')?array('selected'=>'selected'):null); 
			$f->label = __('Flash Version'); 
			$f->columnWidth = 50;
			$fset->add($f);

	        // ------------------------------------------------------------------------
	        // SM2 flashblock must load flashblock.css (remove this)
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldCheckbox'); 
			$f->attr('name', 'flashblock');
			$f->attr('value', 1); 
			if($data['flashblock']) $f->attr('checked', 'checked'); 
			$f->label = __('Use Flashblock'); 
			$f->description = __(''); 
			//$f->columnWidth = 50;
			$fset->add($f);
			//$inputfields->add($f); 

	        // ------------------------------------------------------------------------
	        // SWF Folder
	        // ------------------------------------------------------------------------
			$f = wire('modules')->get('InputfieldText'); 
			$f->attr('name', 'swf_folder');
			$f->attr('value', $data['swf_folder']); 
			$f->attr('size', 80); 
			$f->attr('maxlength', 200);
			$f->attr('placeholder', '/vendor/soundmanagerv297a/swf/');
			$f->label = __('SWF Folder'); 
			$f->description = __('Override the location of the SWF folder.'); 
			$fset->add($f);
			$f->collapsed = Inputfield::collapsedBlank;
			//$inputfields->add($f); 


		$inputfields->add($fset); 


        // ------------------------------------------------------------------------
        // SINGLE FILE PER PAGE MODEL
        // ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'one_per_page');
		$f->attr('value', 1); 
		if($data['one_per_page']) $f->attr('checked', 'checked'); 
		$f->label = __('Use a 1 file per page model'); 
		$f->description = __("Selecting this will fall back on the file's page title instead of the filename");
		//$f->notes = __('This works best when used with ID3 since the schema for title, artist, composer, and album can be included'); 
		//$f->columnWidth = 50;
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 


		// ------------------------------------------------------------------------
		return $inputfields;
	}


    public static function getFormattedOptionName($obj) {
        return !empty($obj->label) ? $obj->label . ' (' . $obj->name . ')' : $obj->name;
    }


	/**
	 * optional per-page style
	 */
	private $styles = [];
	private $scripts = []; // need to sometimes have multiple scripts added for different players
	private $headJS	= []; // for any JS code needed to go in the head
	private $scriptsLoc = 'foot'; // assume scripts are loaded in footer (alternate = head)
	private $useFlash = 0; // some players require flash container
	private $baseUrl = '';
    private $basePath = '';


	public function init() {
		$this->addHookAfter('Page::render', $this, 'injectCode');

		// set base paths and urls for scripts
        //$this->basePath  = $this->config->path($this->className);
        //$this->baseUrl 	 = $this->config->url($this->className);
        $this->basePath  = $this->config->paths->TextformatterSoundmanager;
        $this->baseUrl   = $this->config->urls->TextformatterSoundmanager;
	}


    /**
     * New style format method
     *
     * NB: Changes the input $str variable
     */
    public function formatValue(Page $page, Field $field, &$str) {

		$openSym 	= $this->open_symbol ?: '[';
		$closeSym 	= $this->close_symbol ?: ']';
		// exit early when possible
		if(strpos($str, $openSym) === false) return;
		if(strpos($str, $closeSym) === false) return;
		// also check for one of the tag words

		// default pattern
    	//$pattern = "/\[(\w+) (.+?)]/";
    	// with replacement
    	$pattern = '/' . preg_quote($openSym) .  '(\w+) (.+?)' . $closeSym . '/';
    	$callback = "self::processShortCode";
    	$str = preg_replace_callback($pattern, $callback, $str);


    	/**
    	 * Cleanup any divs inside <p> tags:
    	 */
    	if(strpos($str, '<p><div') !== false) {
	    	$sr = array(
	    		'<p><div' 	=> '<div',
	    		'</div></p>'=> '</div>'
	    	);
			$str = str_replace(array_keys($sr), $sr, $str);
		}


    }

	/**
	 * This allows us to use the shortcodes for the audio players
	 * when in CK Editor
	 * @param  [type] $matches [description]
	 * @return [type]          [description]
	 * example of expected shortcode:
	 * [audio tag=barnes01 type=bar-ui bar-ui=full-width]
	 */
	public function processShortCode($matches) {
		if(!$this->files_field) return;
		$ff = $this->files_field;
		$playerTag = $this->player_tag;
		$listTag = $this->playlist_tag;
	    // parse out the arguments
	    $dat = explode(" ", $matches[2]);
	    $params = array();
	    foreach ($dat as $d){
	    	if(strpos($d, '=') === false) continue; //only process contents of brackets if there is an = sign
	        list($opt, $val) = explode("=", $d);
	        $params[$opt] = trim($val, '"');
	    }
	    switch($matches[1]) {
	        case $playerTag: // for players off page/local audio
	            $tag = $params['tag'];
	            $page = wire('page');
	            if(!$page->$ff) return;
	            $files = $page->$ff->findTag($tag); // let the field be configurable
	            return $this->player($files, $params);
	         case $listTag: // for players referenced from other pages
	         	if(!$this->data['tag_field']) return;
	         	$tf = $this->data['tag_field'];
	            $tag = $params['tag'];
	            $page = wire('pages')->get("{$tf}=$tag");
	            if(!$page) return; // if we didn't find a matching page, return
	            $files = $page->$ff; // look for files on this page
	            if(!count($files)) return; // if page has no files return
	            return $this->player($files, $params);
	    }

	}

	/**
	 * Player: 
	 * 1) Output the markup for the player
	 * 2) Insert any assets into the $config->scrips and $config->styles
	 * 3) Inject any markup into the page, styles, scripts or HTML
	 * @param  [type] $files   [description]
	 * @param  array  $options [description]
	 * @return [type]          [description]
	 */
	public function player($files, $options = []) {

		/**
		 * As a textformatter, the module expects the files to come in as Pagefiles (associated with the page object):
		 * pagefile (single) needs to be converted into WireArray for compatibility
		 * Also exclude WireArray
		 * this might be improved by checking instanceof Pagefile (?) though this currently
		 * seems to work with sending in WireArrays to the module, or single Pagefile...
		 */
		if($files instanceof Pagefiles == false && $files instanceof WireArray == false) {
			$file = $files;
			$files = new WireArray();
			$files->add($file);
		}

		$files = $this->filterAudio($files);
		if(!count($files)) return;
		// These are the player defaults unless any item is
		// overridden in the module config, or the player's shortcode.
		$defaults = [
			'type' 		=> $this->data['single_default'],
			'limit' 	=> null,
			'bar-ui' 	=> '',
			'extra' 	=> false, // applies to bar-ui
			'color'		=> '',
			'skin'		=> '', // applies only to bar-ui
			'tag'		=> 'api', // for api calls without a tag specified in options
			'cassette'  => '',
		];

		$options = array_merge($defaults,$options);

		// Bar UI & Page Player support playlists; default to bar-ui for
		if(count($files) > 1 && $options['type'] !=='page-player') {
			$options['type'] = 'bar-ui';
		}

		// the limit can be used if you are defining a player from a shortcode
		// or the API and don't want to play all of the found audio files
		$limit = $options['limit'];

		// The type starts off as the mod config default,
		// and may be modified to bar-ui if multiple files
		// The type can also be set on the shortcode, or the api call.
		$type = $options['type'];


		$list = array(); // for playlists
		$links = array(); // for single players
		$urls = array(); // just the urls
		$titles = array(); // just the titles

		// Build the inner markup:
		foreach($files as $mp3) {

			// default title source and formatting:
			$titleOut = $mp3->description ?: $mp3->name; // default
			$titleAtt = $mp3->description ?: $mp3->name; // attribute

			// allow api usage of the module to override which files field to reference for audio...
			$filesField = !empty($options['files_field']) ? $options['files_field'] : $this->files_field;

			if( $this->one_per_page && count( $mp3->page->{$filesField} ) == 1 ) {
				$titleOut = $mp3->description ?: $mp3->page->title; // default
				$titleAtt = $mp3->description ?: $mp3->page->title; // attribute
			}

			// Cache Version
			if($this->data['getid3']) {
				$cache = wire('cache');
				$id3Data = $cache->get($mp3->name . '_data', $cache::expireNever, function() use($mp3) {
				  	return $this->getId3($mp3);
				});
				$id3Title = $this->getFormattedTitle($id3Data, $type);
				// skip the ID3 title if any of the placeholders were not replaced.
				if($id3Title && !strpos($id3Title, '{')) $titleOut = $id3Title;
				//if($id3Title) $titleOut = $id3Title;
			}

			if($this->data['use_schema']) {
				$wrapOpen = '<li itemprop="track" itemscope itemtype="http://schema.org/MusicRecording">';
			} else {
				$wrapOpen = '<li>';
			}
			$class = $type == 'mp3-button' ? 'sm2_button ' . $options['tag'] : $options['tag']; // only the player button gets this class
			$class = " class='$class'";
			//$class = $type == 'mp3-button' ? " class='sm2_button'" : ''; // only the player button gets this class

			$itemLink = "<a href='{$mp3->url}' title='{$titleAtt}'{$class}>$titleOut</a>";

			$list[] = $wrapOpen . $itemLink . '</li>';
			$links[] = $itemLink;
			$urls[] = $mp3->url;
			$titles[] = $titleOut;

		}

		// File Locations
		$locations 	= $this->getLocations();
		$smUrl 		= $locations['sm_url'];
		$skinsPath 	= $locations['skins_path'];
		$skinsUrl 	= $locations['skins_url'];


		// Main JS File for SM2
		$this->config->scripts->add($smUrl . 'script/soundmanager2-nodebug-jsmin.js');
		//$this->config->scripts->add($smUrl . 'script/soundmanager2-jsmin.js'); //debug

		if($limit) {
			$list = array_slice($list, 0, $limit);
			$links = array_slice($links, 0, $limit);
		}

		/**
		 * Supported Player Types (these are the required tags to call the relative player)
		 * =====================================
		 * mp3-button 			@see http://www.schillmania.com/projects/soundmanager2/demo/mp3-player-button/
		 * page-player			@see http://www.schillmania.com/projects/soundmanager2/demo/page-player/
		 * mp3-links			@see http://www.schillmania.com/projects/soundmanager2/demo/play-mp3-links/
		 * bar-ui				@see http://www.schillmania.com/projects/soundmanager2/demo/bar-ui/
		 * 360-player 			@see http://www.schillmania.com/projects/soundmanager2/demo/360-player/
		 * 360-vis				@see http://www.schillmania.com/projects/soundmanager2/demo/360-player/canvas-visualization.html
		 * cassette 			@see http://www.schillmania.com/projects/soundmanager2/demo/cassette-tape/more.html
		 */

		/**
		 * BAR UI
		 * @var [type]
		 */
		if($type == 'bar-ui') {
			$style_array = [];

			// file tag added as class for styling
			$pc = '';
			if($options['tag']) {
				$options['bar-ui'] .= ' ' . $options['tag'];
				$pc = '.' . $options['tag'];
			}

			$skin = $options['skin'] ?: $this->data['barui_skin'];

			$color = $options['color'] ?: $this->data['barui_color'];
			if($color) {
				$style_array[] = ".sm2-bar-ui{$pc} .sm2-main-controls,.sm2-bar-ui{$pc} .sm2-playlist-drawer {background-color: #{$color} !important;}";
			}

			if($this->data['barui_size']) {
				$style_array[] = ".sm2-bar-ui{$pc} {font-size: {$this->data['barui_size']}px;}";
			}

			if($this->data['playlist_height']) {
				$style_array[] = "{$pc} .sm2-playlist-wrapper ul {max-height: {$this->data['playlist_height']}px ;}";
			}

			if(count($style_array)) {
				$this->styles[$options['tag']] = implode("\n", $style_array);
			}

			if($this->data['barui_options']) {
				$options['bar-ui'] .= ' ' . implode(' ', $this->data['barui_options']);
			}

			// Add the skin class to allow multiple skins on 1 page
			if($skin) $options['bar-ui'] .= ' ' . $skin;

			$barUISingle = $this->barUISingle($options);
			$barUIPlaylist = $this->barUIPlaylist($options);

			// Add Styles
			$this->config->styles->add($smUrl . 'bar-ui/css/bar-ui.css');
			$this->config->scripts->add($smUrl . 'bar-ui/script/bar-ui.js');

			if($skin) {
				if(is_file($skinsPath . $skin . '.css')) {
					$this->config->styles->add($skinsUrl . $skin . '.css');
				}
			}
			return str_replace('{{audio}}', implode($list), count($list) > 1 ? $barUIPlaylist : $barUISingle);
		}


		/**
		 * Page Player
		 * @see http://www.schillmania.com/projects/soundmanager2/demo/page-player/
		 */
		if($type == 'page-player') {
			$this->scripts['init'] = $this->sm2Init();
			$pagePlayer = '<ul class="playlist">{{audio}}</ul>';
			$this->config->styles->add($smUrl . 'page-player/css/page-player.css');
			$this->config->scripts->add($smUrl . 'page-player/script/page-player.js');
			return str_replace('{{audio}}', implode($list), $pagePlayer);
		}


		/**
		 * Small play button
		 * @var [type]
		 */
		if($type == 'mp3-button') {
			$color = $options['color'] ?: $this->data['barui_color'];
			if($color) {
				$this->styles[$options['tag']] = "a.sm2_button.{$options['tag']}:not(.sm2_playing):not(.sm2_paused) {background-color: #{$color}}";
			}
			$this->config->styles->add($smUrl . 'mp3-player-button/css/mp3-player-button.css');
			$this->config->scripts->add($smUrl . 'mp3-player-button/script/mp3-player-button.js');
			return implode($links);
		}

		/**
		 * Inline Player (MP3 Links)
		 * @see http://www.schillmania.com/projects/soundmanager2/demo/play-mp3-links/
		 */
		if($type == 'mp3-links') {
			$this->useFlash = 1;
			$this->scripts['init'] = $this->sm2Init();
			$inlinePlayer = '<ul class="graphic">{{audio}}</ul>';
			$this->config->styles->add($smUrl . 'play-mp3-links/css/inlineplayer.css');
			$this->config->scripts->add($smUrl . 'play-mp3-links/script/inlineplayer.js');
			return str_replace('{{audio}}', implode($list), $inlinePlayer);
		}

		/**
		 * 360 Player
		 * @see http://www.schillmania.com/projects/soundmanager2/demo/360-player/
		 * 
		 */
		if($type == '360-player') {
			$this->useFlash = 1;
			$this->scripts['init'] = $this->sm2Init();
			$this->config->scripts->add($smUrl . '360-player/script/berniecode-animator.js');
			$this->config->styles->add($smUrl . '360-player/360player.css');
			$this->config->scripts->add($smUrl . '360-player/script/360player.js');
			return '<div class="ui360">'. $links[0] . '</div>';
		}

		/**
		 * 360 Player Vis
		 * @see http://www.schillmania.com/projects/soundmanager2/demo/360-player/
		 * to control the visualizations, the init needs to be configurable
		 * 
		 */
		if($type == '360-vis') {
			$this->useFlash = 1;
			$this->scripts['three60'] = $this->threeSixtyInit();
			$this->config->scripts->add($smUrl . '360-player/script/berniecode-animator.js');
			$this->config->styles->add($smUrl . '360-player/360player.css');
			$this->config->styles->add($smUrl . '360-player/360player-visualization.css');
			$this->config->scripts->add($smUrl . '360-player/script/360player.js');
			return '<div class="ui360 ui360-vis">'. $links[0] . '</div>';
		}

		/**
		 * Cassette Tape
		 * @see http://www.schillmania.com/projects/soundmanager2/demo/cassette-tape/more.html
		 * 
		 */
		if($type == 'cassette') {
			
			//if(!$options['cassette']) $options['cassette'] = '';
			
			// If no shortcode or api options provided, fallback to module options:
			if(!$options['cassette'] && $this->cassette_options) {
				$options['cassette'] = implode(' ', $this->cassette_options);
			}

			$this->config->styles->add($smUrl . 'cassette-tape/css/cassette-tape-ui.css');
			$this->config->scripts->add($smUrl . 'cassette-tape/script/cassette-tape-ui.js');
			$this->scripts['cassette'] = str_replace('{{audio}}', $urls[0], $this->cassetteInit());
			$swfUrl = $this->getLocations()['swf_url'];
			$this->headJS['cassette'] = "var swfUrl = '{$swfUrl}';";
			return str_replace('{{title}}', $titles[0], $this->cassetteMarkup($options['cassette']));
		}

		/**
		 * FLASH
		 */
		if($this->data['flashblock'] && $this->useFlash) {
			$this->config->styles->add($smUrl . 'flashblock/flashblock.css');
		}


	}

	/**
	 * Method for getting only the assets (css/js) for any player
	 * mostly useful if you are outputting your own markup for any player
	 * and just need the assets included on the page
	 * @todo - include other types of players; for now this only supports the mp3 button
	 */
	public function getAssets($type, $options) {

		// File Locations
		$locations 	= $this->getLocations();
		$smUrl 		= $locations['sm_url'];
		$skinsPath 	= $locations['skins_path'];
		$skinsUrl 	= $locations['skins_url'];

		$this->config->scripts->add($smUrl . 'script/soundmanager2-nodebug-jsmin.js');

		/**
		 * Small play button
		 * @var [type]
		 */
		if($type == 'mp3-button') {
			$color = $options['color'] ?: $this->data['barui_color'];
			if($color) {
				if(!empty($options['tag'])) {
					$this->styles[$options['tag']] = "a.sm2_button.{$options['tag']}:not(.sm2_playing):not(.sm2_paused) {background-color: #{$color}}";
				} else {
					$this->styles['use'] = "a.sm2_button:not(.sm2_playing):not(.sm2_paused) {background-color: #{$color}}";
				}
			}
			$this->config->styles->add($smUrl . 'mp3-player-button/css/mp3-player-button.css');
			$this->config->scripts->add($smUrl . 'mp3-player-button/script/mp3-player-button.js');
		}

		/**
		 * FLASH
		 */
		if($this->data['flashblock'] && $this->useFlash) {
			$this->config->styles->add($smUrl . 'flashblock/flashblock.css');
		}

	}


	/**
	 * [injectCode description]
	 * @param  [type] $event [description]
	 * @return [type]        [description]
	 */
	public function injectCode($event) {

		$proceed = false;
		if(count($this->styles) || count($this->scripts)) $proceed = true;
		if(!$proceed) return;

		$injectH = count($this->styles) ? "<!-- SM2 Styles -->\n<style>" . implode("\n", $this->styles) . "\n</style>" : '';
		$injectF = count($this->scripts) ? "<!-- SM2 Scripts -->\n" . implode("\n", $this->scripts) . "\n" : '';
		$injectH .= count($this->headJS) ? "\n<!-- SM2 JS -->\n<script type='text/javascript'>\n" . implode("\n", $this->headJS) . "\n</script>" : '';

		$page = $event->object;
		$output = $event->return;
		// don't add this to the admin pages
		if ($page->template->flags & Template::flagSystem) return;
		// don't add this if output isn't html page
		if (strpos($output, '</html>') === false) return;

		$flashContainer = $this->useFlash ? '<div id="sm2-container"></div>' : '';
		// Replace
		$search = array("</head>", "</body>", "</body>");
		$replace = array(
			$injectH ."\n</head>", 
			$flashContainer . "\n</body>",
			$injectF . "\n</body>",
		);
		$output = str_replace($search, $replace, $output); 

		$event->return = $output;
	}


	private function getLocations() {
		$modPath 	= $this->config->paths->siteModules . __CLASS__ . '/';
		$modUrl 	= $this->config->urls->siteModules . __CLASS__ . '/';
		$smDefault 	= $modUrl . 'soundmanager2/';

		// Assets Location
		$smUrl = $this->assets_folder && is_dir($this->config->paths->root . $this->assets_folder) 
				? $this->config->urls->root . $this->assets_folder 
				: $modUrl . 'soundmanager2/';

		// Skins folder location
		$skinsPath = $modPath . 'skins/';
		$skinsUrl = $modUrl . 'skins/';
		if($this->custom_skins && is_dir($this->config->paths->root . $this->custom_skins)) {
			$skinsUrl = $this->config->urls->root . $this->custom_skins;
			$skinsPath = $this->config->paths->root . $this->custom_skins;
		}

		// Flash Location
		$swfUrl = $this->swf_folder && is_dir($this->config->paths->root . $this->swf_folder) 
				? $this->config->urls->root . $this->swf_folder
				: $smDefault . 'swf/';

		return array(
			'mod_path' 	 => $modPath,
			'mod_url'	 => $modUrl,
			'sm_url'	 => $smUrl,
			'skins_path' => $skinsPath,
			'skins_url'	 => $skinsUrl,
			'swf_url'    => $swfUrl,
		);


	}


	/**
	 * [barUISingle: Return the markup for a single bar-ui player]
	 * @param  [array] $options [classes that the player will use for layout and behaviour]
	 * @return [string]          [description]
	 *
	 * The bar-ui options:
	 * playlist-open (default for multiple files)
	 * flat
	 * dark-text
	 * full-width
	 * fixed (makes it appear fixed at the bottom of the page)
	 * compact
	 * http://www.schillmania.com/projects/soundmanager2/demo/bar-ui/
	 *	you can change the font-size of the outer class to make the whole thing bigger
	 *
	 * 
	 */
	public function barUISingle($options) {
		 return wireRenderFile($this->basePath . '/markup/barui-single.php', [
                'options' => $options,
            ]
        );
	}

	/**
	 * [$barUIPlaylist description]
	 * @see http://www.schillmania.com/projects/soundmanager2/demo/bar-ui/
	 */
	public function barUIPlaylist($options) {
		 return wireRenderFile($this->basePath . '/markup/barui-playlist.php', [
                'options' => $options,
            ]
        );
	}

	/**
	 * [cassetteMarkup description]
	 * @return [type] [description]
	 * 1) tape texture clear cutout ma-r90
	 * 2) tape texture clear cutout black-micro dark
	 * 3) tape texture clear cutout
	 * 4) tape texture clear (blue color)
	 * 5) tape texture clear (black-micro dark)
	 */
	public function cassetteMarkup($options) {
		 return wireRenderFile($this->basePath . '/markup/cassette.php', [
                'options' => $options,
            ]
        );
	}


	public function sm2Init() {

		$swfUrl = $this->getLocations()['swf_url'];
		return "
		<script type='text/javascript'>
			var swfUrl = '{$swfUrl}';

			soundManager.setup({
			  url: '{$swfUrl}',
			  flashVersion: 9,
			});
			//console.log(soundManager.setup);
		</script>
		";

	}

	/**
	 * [cassetteInit description]
	 * @return [type] [description]
	 */
	public function cassetteInit() {
		return '<script>var $sound = "{{audio}}";</script>';
	}

	/**
	 * [threeSixtyInit description]
	 * @return [type] [description]
	 */
	public function threeSixtyInit() {

		$swfUrl = $this->getLocations()['swf_url'];

		return	"<script type='text/javascript'>

		soundManager.setup({
		  url: '{$swfUrl}'
		});

		threeSixtyPlayer.config.scaleFont = (navigator.userAgent.match(/msie/i)?false:true);
		threeSixtyPlayer.config.showHMSTime = true;

		// enable some spectrum stuffs

		threeSixtyPlayer.config.useWaveformData = true;
		threeSixtyPlayer.config.useEQData = true;

		// enable this in SM2 as well, as needed

		if (threeSixtyPlayer.config.useWaveformData) {
		  soundManager.flash9Options.useWaveformData = true;
		}
		if (threeSixtyPlayer.config.useEQData) {
		  soundManager.flash9Options.useEQData = true;
		}
		if (threeSixtyPlayer.config.usePeakData) {
		  soundManager.flash9Options.usePeakData = true;
		}

		if (threeSixtyPlayer.config.useWaveformData || threeSixtyPlayer.flash9Options.useEQData || threeSixtyPlayer.flash9Options.usePeakData) {
		  // even if HTML5 supports MP3, prefer flash so the visualization features can be used.
		  soundManager.preferFlash = true;
		}

		// favicon is expensive CPU-wise, but can be used.
		if (window.location.href.match(/hifi/i)) {
		  threeSixtyPlayer.config.useFavIcon = true;
		}

		if (window.location.href.match(/html5/i)) {
		  // for testing IE 9, etc.
		  soundManager.useHTML5Audio = true;
		}

		console.log(soundManager.setup);

		</script>";

	}


	/**
	 * HTML5 Supports
	 * mp3, mp4, ogg, opus, wav
	 * Flash 9:
	 * MPEG-4 (AAC, HE-AAC, H.264) 
	 */
	private function filterAudio($files) {
		$allowed = $this->audio_formats;
		foreach($files as $file) {
			if(!in_array($file->ext,$allowed)) $files->remove($file);
		}
		return $files;
	}


	/**
	 * If Get ID 3 is enabled, this will pull the data from the file:
	 * @param  [type] $file [description]
	 * @return [type]       [description]
	 */
	public function getId3($file) {
		require_once( /*NoCompile*/ dirname(__FILE__) . '/getid3/getid3.php');
		$getID3 = new getID3;
		$ThisFileInfo = $getID3->analyze($file->filename);
		if(isset($ThisFileInfo['error'])) return;
		getid3_lib::CopyTagsToComments($ThisFileInfo);
		if(empty($ThisFileInfo['comments'])) return;
		$skipData = ['picture', 'iTunSMPB']; // these fields prevent wirecache from being able to save
		foreach($skipData as $sd) unset($ThisFileInfo['comments'][$sd]);
		return $ThisFileInfo['comments'];
	}


	/**
	 * If GetID3 is enabled, this returns formatted title
	 * Format defaults to Bar UI; if not Bar UI, it just returns the
	 * artist and title
	 * @param  [array] $file_info [File Info is the Array that Get ID3 pulls from the audio file]
	 * @return [string]  [Formatted Title]
	 */
	private function getFormattedTitle($file_info, $type = 'bar-ui') {

		if(null == $file_info) return;
		if(empty($file_info['title'])) return; // tracks need to have at least the title tag populated

		if($type != 'bar-ui') {
			$artist = !empty($file_info['artist']) ? $file_info['artist'][0] . ': ' : '';
			$title = !empty($file_info['title']) ? $file_info['title'][0] : '';
			return $artist  . $title;
		}

		// Allowed Tags
		$ta = ['title','composer','artist','track','album'];
		$search = [];
		$replace = [];
		foreach($ta as $tag) {
			if(!empty($file_info[$tag][0])) {
				$search[] = '{' . $tag . '}';
				$replace[] = $file_info[$tag][0];
			}
		}

		if($this->data['barui_template']) {
			$template = $this->data['barui_template'];
			return str_replace($search, $replace, $template);
		}

	}


	/**
	* Return first doc comment found in a file.
	* @return string 
	*/
	private static function getSkins($folder = null) {
		$skins_dir = $folder ?: dirname(__FILE__) . '/skins/';
		$dir = new DirectoryIterator($skins_dir);
		$skins = [];
		foreach($dir as $fileinfo) {
		    if(!$fileinfo->isDot() && $fileinfo->isFile() && $fileinfo->getExtension() == 'css') {
		        $skins[$fileinfo->getBasename()] = self::getFileCommentBlock($fileinfo->getPathname());
		    }
		}
		return $skins;
	}

	/**
	* Return the Title and Description of the Skin
	* @hack 
	* @return string
	*/
	private static function getFileCommentBlock($file_name) {
		$path_parts = pathinfo($file_name);
		$skinfo['file'] = $path_parts['filename'];
		$comments = file_get_contents($file_name);
		$lines = explode(PHP_EOL, $comments);
		$lines = array_slice($lines, 0, 4);
		foreach($lines as $line) {
			if(strpos($line, ':') === false) continue;
			$lineA = explode(':', $line);
			if( trim($lineA[0]) == 'Skin') $skinfo['title'] = trim($lineA[1]);
			if( trim($lineA[0]) == 'Description') $skinfo['description'] = trim($lineA[1]);
		}
		return count($skinfo) ? $skinfo : null;
	}



}
